{"version":3,"sources":["logo.svg","App.js","Avatarlist.js","Avatar.js","serviceWorker.js","index.js"],"names":["module","exports","App","Avatarlist","props","className","src","name","alt","work","Avatar","state","this","setState","avatarlistarray","id","arrayavatarcard","map","avatarcard","i","key","onClick","namechange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,kC,iLCyB5BC,ICXAC,EAXE,SAACC,GACd,OACI,yBAAKC,UAAU,4DACnB,gCAAQ,yBAAKC,IAAG,sCAAiCF,EAAMG,MAAQF,UAAU,oBAAoBG,IAAI,WACrG,yBAAKH,UAAU,IACX,4BAAMD,EAAMG,MACZ,2BAAIH,EAAMK,U,oCCmDCC,E,YAtDP,aACC,IAAD,8BACI,+CACKC,MAAM,CACPJ,KAAK,2BAHb,E,0EAQIK,KAAKC,SAAS,CACVN,KAAK,8B,+BAKJ,IAAD,OAEFO,EAAgB,CACtB,CACIC,GAAG,EACHR,KAAK,SACLE,KAAK,iBAET,CACIM,GAAG,EACHR,KAAK,SACLE,KAAK,aAET,CACIM,GAAG,EACHR,KAAK,YACLE,KAAK,kBAET,CACIM,GAAG,EACHR,KAAK,SACLE,KAAK,YAIPO,EAAiBF,EAAgBG,KAAI,SAACC,EAAWC,GACnD,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAGJ,GAAID,EAAgBK,GAAGJ,GAAIR,KAAMO,EAAgBK,GAAGZ,KAAME,KAAMK,EAAgBK,GAAGV,UAG1G,OACR,yBAAKJ,UAAU,KACf,4BAAKO,KAAKD,MAAMJ,MACnBS,EACD,yBAAKX,UAAU,KAAK,4BAAQgB,QAAS,kBAAI,EAAKC,cAAcjB,UAAU,yDAAlD,mB,GAjDKkB,aCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MACXC,SAASC,eAAe,SDuHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.29065f97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport './Avatar.css'\r\nimport 'tachyons'\r\nconst Avatarlist=(props)=>{\r\n    return (\r\n        <div className=\"avatarstyle ma4 bg-light-purple dib grow shadow-1 pa3 tc\"> \r\n    <button><img src={`https://joeschmoe.io/api/v1/${props.name}`} className=\"br-100 h3 w3 grow\" alt=\"Avatar\" />\r\n<div className=\"\">    \r\n    <h1 >{props.name}</h1>\r\n    <p>{props.work}</p>\r\n    </div></button>\r\n    </div>\r\n    );\r\n}\r\nexport default Avatarlist","import React,{Component} from 'react';\r\nimport './Avatar.css';\r\nimport 'tachyons';\r\nimport Avatarlist from './Avatarlist'\r\n\r\n    class Avatar extends Component{\r\n        constructor()\r\n        {\r\n            super();\r\n            this.state={\r\n                name:\"Welcome to Avatar World\"\r\n            }\r\n        }\r\n        \r\n        namechange(){\r\n            this.setState({\r\n                name:\"Welcome to our GANG !!!\"\r\n            }\r\n            )\r\n        }\r\n\r\n        render(){\r\n        \r\n        const avatarlistarray=[\r\n        {\r\n            id:1,\r\n            name:\"Ruchir\",\r\n            work:\"Web Developer\"\r\n        },\r\n        {\r\n            id:2,\r\n            name:\"Danyal\",\r\n            work:\"Scientist\"\r\n        },\r\n        {\r\n            id:3,\r\n            name:\"Sreeharsh\",\r\n            work:\"Security Xpert\"\r\n        },\r\n        {\r\n            id:4,\r\n            name:\"Arvind\",\r\n            work:\"Builder\"\r\n        }\r\n    ]\r\n\r\n    const arrayavatarcard= avatarlistarray.map((avatarcard,i)=>{\r\n        return <Avatarlist key={i} id={avatarlistarray[i].id} name={avatarlistarray[i].name} work={avatarlistarray[i].work} />\r\n\r\n    })\r\n            return(\r\n    <div className=\"c\">\r\n    <h1>{this.state.name}</h1>\r\n{arrayavatarcard}\r\n<div className=\"g\" ><button onClick={()=>this.namechange()} className=\"f6 grow no-underline br-pill ph3 pv2 mb2 white bg-red\">Subscribe</button>\r\n</div>\r\n</div>)\r\n}\r\n}\r\n\r\nexport default Avatar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Avatarlist from './Avatarlist'\nimport Avatar from './Avatar';\nimport './Avatar.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Avatar/>\n    ,document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}